from math import gcd
import math


class Fraction:
    """Class representing a fraction and operations on it

    Author : V. Van den Schrieck
    Date : October 2021
    This class allows fraction manipulations through several operations.
    """

    def __init__(self, num: int = 0, den: int = 1):
        """This builds a fraction based on some numerator and denominator.

        PRE : /
        POST : Si den est différent de 0, la fraction est initialisée avec le numérateur et le dénominateur fournis.
               Et si un le dénominateur est négatif, le moins passe sur le numérateur.
        RAISE : ZeroDivisionError si le dénominateur vaut 0.
        """
        if den == 0:
            raise ZeroDivisionError("Le dénominateur ne peut pas être nul.")

        if num >= 0 and den >= 0:
            self.__num = num
            self.__den = den

        elif den < 0 <= num:
            # garde le négatif du côter numérateur
            self.__num = -num
            self.__den = -den

        elif num < 0 < den:
            # garde le négatif du côter numérateur
            self.__num = num
            self.__den = den

        else:
            # si le num et den sont négatif, on met les deux en positif
            self.__num = abs(num)
            self.__den = abs(den)

        simple = gcd(int(self.__num), int(self.__den))
        self.__simpleNum = self.__num // simple
        self.__simpleDen = self.__den // simple

    @property
    def numerator(self):
        return self.__simpleNum

    @property
    def denominator(self):
        return self.__simpleDen

    # ------------------ Textual representations ------------------

    def __str__(self):
        """Return a textual representation of the reduced form of the fraction

        PRE : La fraction est en forme réduite.
        POST : Retourne une chaîne de caractères au format 'numérateur/dénominateur'. La fraction est immuable
        """
        return f"{self.__num}/{self.__den}"

    def as_mixed_number(self):
        """Return a textual representation of the reduced form of the fraction as a mixed number

        A mixed number is the sum of an integer and a proper fraction

        PRE : La fraction est en forme réduite.
        POST : Retourne une chaîne de caractères au format 'entier numérateur/dénominateur'.
        """
        int_num = math.floor(self.__num / self.__den)
        rested = self.__num - int_num * self.__den
        return f"{int_num} + {rested}/{self.__den}"

    # ------------------ Operators overloading ------------------

    def __add__(self, other: 'Fraction'):
        """Overloading of the + operator for fractions

         PRE : other est une instance de Fraction.
        POST : Retourne une nouvelle Fraction représentant la somme de self et de other.
         """
        nouveau_num = (self.__simpleNum * other.__simpleDen) + (other.__simpleNum * self.__simpleDen)
        nouveau_den = self.__simpleDen * other.__simpleDen
        return Fraction(nouveau_num, nouveau_den)

    def __sub__(self, other: 'Fraction'):
        """Overloading of the - operator for fractions

        PRE : other est une instance de Fraction.
        POST : Retourne une nouvelle Fraction représentant la différence entre self et other.
        """
        nouveau_num = (self.__simpleNum * other.__simpleDen) - (other.__simpleNum * self.__simpleDen)
        nouveau_den = self.__simpleDen * other.__simpleDen
        return Fraction(nouveau_num, nouveau_den)

    def __mul__(self, other: 'Fraction'):
        """Overloading of the * operator for fractions

        PRE : other est une instance de Fraction.
        POST : Retourne une nouvelle Fraction représentant le produit de self et de other.
        """
        nouveau_num = self.__simpleNum * other.__simpleNum
        nouveau_den = self.__simpleDen * other.__simpleDen
        return Fraction(nouveau_num, nouveau_den)

    def __truediv__(self, other: 'Fraction'):
        """Overloading of the / operator for fractions

        PRE : other est une instance de Fraction et other n'est pas zéro.
        POST : Retourne une nouvelle Fraction représentant la division de self par other.
        RAISES : ZeroDivisionError si le numérateur d'un des deux fraction vaut zéro.
        """
        if self.__num == 0 or other.__num == 0:
            raise ZeroDivisionError("La division par zéro n'est pas autorisée.")
        nouveau_num = self.__simpleNum * other.__simpleDen
        nouveau_den = self.__simpleDen * other.__simpleNum
        return Fraction(nouveau_num, nouveau_den)

    def __pow__(self, other: 'Fraction'):
        """Overloading of the ** operator for fractions

        PRE : other est un entier.
        POST : Retourne une nouvelle Fraction représentant self élevé à la puissance de other.
        RAISES : ValueError on ne peut pas élever 0 à une puissance négative
        """
        base = self.__simpleNum / self.__simpleDen
        exp = other.__simpleNum / other.__simpleDen
        if base == 0 and exp < 0:
            raise ValueError("On ne peut pas élever 0 à une puissance négative")

        return round(base ** exp, 3)

    def __eq__(self, other: 'Fraction'):
        """Overloading of the == operator for fractions

        PRE : other est une instance de Fraction.
        POST : Retourne True si self et other représentent la même fraction, False sinon.
        """
        return self.__simpleNum == other.__simpleNum and self.__simpleDen == other.__simpleDen

    def __float__(self):
        """Returns the decimal value of the fraction

        PRE : /
        POST :Retourne la représentation en nombre à virgule flottante de la fraction.
        """
        return self.__simpleNum / self.__simpleDen

    # TODO : [BONUS] You can overload other operators if you wish (ex : <, >, ...)

    def is_smaller(self, other : 'Fraction'):
        """
        Overloading of the < operator for fractions

        PRE : other est une instance de Fraction
        POST : Retourne un booléen disant si la valeur de la première fraction est plus petite que la deuxième.
        """
        return (self.__simpleNum/self.__simpleDen) < (other.__simpleNum/other.__simpleDen)

    def is_bigger(self, other : 'Fraction'):
        """
        Overloading of the > operator for fractions

        PRE : other est une instance de Fraction
        POST : Retourne un booléen disant si la valeur de la première fraction est plus grande que la deuxième.
        """
        return (self.__simpleNum/self.__simpleDen) > (other.__simpleNum/other.__simpleDen)

    def inverted(self):
        """
        invert the fraction

        PRE : /
        POST : Retourne l'inverse de la fraction
        RAISES : ZeroDivisionError si le nouveau dénominateur vaut zéro.
        """

        new_num = self.__simpleDen
        new_den = self.__simpleNum

        if new_den == 0:
            raise ZeroDivisionError("On ne peut pas diviser un chiffre par 0")

        return new_num / new_den

    # ------------------ Properties checking  ------------------

    def is_zero(self):
        """Check if a fraction's value is 0

        PRE : /
        POST : Retourne True si la fraction est nulle, False sinon.
        """
        return self.__simpleNum == 0

    def is_integer(self):
        """Check if a fraction is integer (ex : 8/4, 3, 2/2, ...)

        PRE : /
        POST : Retourne True si la fraction est un entier, False sinon.
        """
        return self.__simpleNum % self.__simpleDen == 0

    def is_proper(self):
        """Check if the absolute value of the fraction is < 1

        PRE : /
        POST : Retourne True si la fraction est propre, False sinon.
        """
        return abs(self.__simpleNum) < abs(self.__simpleDen)

    def is_unit(self):
        """Check if a fraction's numerator is 1 in its reduced form

        PRE : /
        POST : Retourne True si la fraction est une fraction unitaire, False sinon.
        """
        return self.__simpleNum == 1

    def is_adjacent_to(self, other: 'Fraction'):
        """Check if two fractions differ by a unit fraction

        Two fractions are adjacents if the absolute value of the difference them is a unit fraction

        PRE : other est une instance de Fraction.
        POST : Retourne True si self et other sont adjacentes, False sinon.
        """
        plus_one = abs(self.__simpleNum / self.__simpleDen) == abs(other.__simpleNum / other.__simpleDen) - 1
        minus_one = abs(self.__simpleNum / self.__simpleDen) == abs(other.__simpleNum / other.__simpleDen) + 1
        return plus_one or minus_one
